df_original = df
df = df[,c(-1,-10)]
df = na.omit(df)
df_original = na.omit(df_original)
df_original <- df_original[order(df_original$HDI_2015),]
df_original$COUNTRY <- factor(df_original$COUNTRY, levels=df_original$COUNTRY[order(df_original$HDI_2015)])
ggplot(df_original, aes(x=COUNTRY,y=HDI_2015)) +
geom_bar(stat="identity", aes(fill=HDI_2015)) +
theme(axis.text.x = element_text(angle = 90, vjust = 1, size = 8, hjust = 1),
axis.text.y = element_text(angle = 0, vjust = 1, size = 8, hjust = 1)) +
xlab("") + ylab("IDH") +
scale_fill_continuous(name="IDH") +
ggtitle("Indice de desenvolvimento humano")
mat <- round(cor(df),2)
melted_cormat <- melt(mat)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) + geom_tile() +
theme(axis.text.x = element_text(angle = 50, vjust = 1, size = 8, hjust = 1),
axis.text.y = element_text(angle = 0, vjust = 1, size = 8, hjust = 1),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
coord_fixed() +
scale_fill_gradient2(low  = "black",
high = "darkturquoise",
mid  = "white",
midpoint = 0,
limit = c(-1,1),
name="Grau de correlacao") +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 3) +
ggtitle("Matriz de correlacao de Pearson")
df_original <- df_original[order(df_original$TOTAL_FRESHWATER_WD_KM3_2010),]
df_original$COUNTRY <- factor(df_original$COUNTRY, levels=df_original$COUNTRY[order(df_original$TOTAL_FRESHWATER_WD_KM3_2010)])
ggplot(df_original, aes(x=COUNTRY,y=TOTAL_FRESHWATER_WD_KM3_2010)) +
geom_bar(stat="identity", aes(fill=TOTAL_FRESHWATER_WD_KM3_2010)) +
theme(axis.text.x = element_text(angle = 90, vjust = 1, size = 8, hjust = 1),
axis.text.y = element_text(angle = 0, vjust = 1, size = 8, hjust = 1)) +
scale_fill_continuous(name="Retirada de água\npotável km³/ano") +
xlab("") + ylab("Total de água potável retirada (km³/ano)\n(Na forma de raiz quadrada)") + ggtitle("")
df_original <- df_original[order(df_original$POPULATION_MILLIONS_2010),]
df_original$COUNTRY <- factor(df_original$COUNTRY, levels=df_original$COUNTRY[order(df_original$POPULATION_MILLIONS_2010)])
ggplot(df_original, aes(x=COUNTRY,y=POPULATION_MILLIONS_2010)) +
geom_bar(stat="identity", aes(fill=POPULATION_MILLIONS_2010)) +
theme(axis.text.x = element_text(angle = 90, vjust = 1, size = 8, hjust = 1),
axis.text.y = element_text(angle = 0, vjust = 1, size = 8, hjust = 1)) +   scale_fill_continuous(name="Populacao\n(milhões)") +
xlab("") + ylab("Populacao em milhoes")
```
# map
sub_df <- df_original[,c("COUNTRY","HDI_2015")]
# dando match nos paises
map <- joinCountryData2Map(sub_df, joinCode = "NAME",
nameJoinColumn = "COUNTRY",suggestForFailedCodes = TRUE)
colourPalette <- RColorBrewer::brewer.pal(5,'RdPu')
# felicidade
mapParams <- mapCountryData(map,
nameColumnToPlot="HDI_2015",
catMethod="fixedWidth",
mapTitle = "Indice de desenvolvimento Humano",
colourPalette = colourPalette,
oceanCol='lightblue',
missingCountryCol = 'white',
borderCol = 'gray',
addLegend = FALSE)
suppressWarnings(do.call(addMapLegend, c(mapParams, legendLabels="all",legendWidth=0.5,legendIntervals="data")))
# map
sub_df <- df_original[,c("COUNTRY","HDI_2015")]
# dando match nos paises
map <- joinCountryData2Map(sub_df, joinCode = "NAME",
nameJoinColumn = "COUNTRY",suggestForFailedCodes = TRUE)
colourPalette <- RColorBrewer::brewer.pal(5,'RdPu')
# felicidade
mapParams <- mapCountryData(map,
nameColumnToPlot="HDI_2015",
catMethod="fixedWidth",
mapTitle = "Indice de desenvolvimento Humano",
colourPalette = colourPalette,
oceanCol='lightblue',
missingCountryCol = 'white',
borderCol = 'gray',
addLegend = FALSE)
# map
sub_df <- df_original[,c("COUNTRY","HDI_2015")]
# dando match nos paises
map <- joinCountryData2Map(sub_df, joinCode = "NAME",
nameJoinColumn = "COUNTRY",suggestForFailedCodes = TRUE)
colourPalette <- RColorBrewer::brewer.pal(5,'RdPu')
# felicidade
mapParams <- mapCountryData(map,
nameColumnToPlot="HDI_2015",
catMethod="fixedWidth",
mapTitle = "Indice de desenvolvimento Humano",
colourPalette = colourPalette,
oceanCol='lightblue',
missingCountryCol = 'white',
borderCol = 'gray',
addLegend = FALSE)
# map
sub_df <- df_original[,c("COUNTRY","HDI_2015")]
# dando match nos paises
map <- joinCountryData2Map(sub_df, joinCode = "NAME",
nameJoinColumn = "COUNTRY",suggestForFailedCodes = TRUE)
colourPalette <- RColorBrewer::brewer.pal(5,'RdPu')
# felicidade
mapParams <- mapCountryData(map,
nameColumnToPlot="HDI_2015",
catMethod="fixedWidth",
mapTitle = "Indice de desenvolvimento Humano",
colourPalette = colourPalette,
oceanCol='lightblue',
missingCountryCol = 'white',
borderCol = 'gray',
addLegend = FALSE)
suppressWarnings(do.call(addMapLegend, c(mapParams, legendLabels="all",legendWidth=0.5,legendIntervals="data")))
# map
sub_df <- df_original[,c("COUNTRY","HDI_2015")]
# dando match nos paises
map <- joinCountryData2Map(sub_df, joinCode = "NAME",
nameJoinColumn = "COUNTRY",suggestForFailedCodes = TRUE)
colourPalette <- RColorBrewer::brewer.pal(5,'RdPu')
# felicidade
mapParams <- mapCountryData(map,
nameColumnToPlot="HDI_2015",
catMethod="fixedWidth",
mapTitle = "Indice de desenvolvimento Humano",
colourPalette = colourPalette,
oceanCol='lightblue',
missingCountryCol = 'white',
borderCol = 'gray',
addLegend = FALSE)
suppressWarnings(do.call(addMapLegend, c(mapParams, legendLabels="all",legendWidth=0.5,legendIntervals="data")))
# map
sub_df <- df_original[,c("COUNTRY","HDI_2015")]
# dando match nos paises
map <- joinCountryData2Map(sub_df, joinCode = "NAME",
nameJoinColumn = "COUNTRY",suggestForFailedCodes = TRUE)
colourPalette <- RColorBrewer::brewer.pal(5,'RdPu')
# felicidade
mapParams <- mapCountryData(map,
nameColumnToPlot="HDI_2015",
catMethod="fixedWidth",
mapTitle = "Indice de desenvolvimento Humano",
colourPalette = colourPalette,
oceanCol='lightblue',
missingCountryCol = 'white',
borderCol = 'gray',
addLegend = FALSE)
suppressWarnings(do.call(addMapLegend, c(mapParams, legendLabels="all",legendWidth=0.5,legendIntervals="data")))
# map
sub_df <- df_original[,c("COUNTRY","HDI_2015")]
# dando match nos paises
map <- joinCountryData2Map(sub_df, joinCode = "NAME",
nameJoinColumn = "COUNTRY",suggestForFailedCodes = TRUE)
colourPalette <- RColorBrewer::brewer.pal(5,'RdPu')
# felicidade
mapParams <- mapCountryData(map,
nameColumnToPlot="HDI_2015",
catMethod="fixedWidth",
mapTitle = "Indice de desenvolvimento Humano",
colourPalette = colourPalette,
oceanCol='lightblue',
missingCountryCol = 'white',
borderCol = 'gray',
addLegend = FALSE)
suppressWarnings(do.call(addMapLegend, c(mapParams, legendLabels="all",legendWidth=0.5,legendIntervals="data")))
# map
sub_df <- df_original[,c("COUNTRY","HDI_2015")]
# dando match nos paises
map <- joinCountryData2Map(sub_df, joinCode = "NAME",
nameJoinColumn = "COUNTRY",suggestForFailedCodes = TRUE)
colourPalette <- RColorBrewer::brewer.pal(5,'RdPu')
# felicidade
mapParams <- mapCountryData(map,
nameColumnToPlot="HDI_2015",
catMethod="fixedWidth",
mapTitle = "Indice de desenvolvimento Humano",
colourPalette = colourPalette,
oceanCol='lightblue',
missingCountryCol = 'white',
borderCol = 'gray',
addLegend = FALSE)
suppressWarnings(do.call(addMapLegend, c(mapParams, legendLabels="all",legendWidth=0.5,legendIntervals="data")))
# map
sub_df <- df_original[,c("COUNTRY","HDI_2015")]
# dando match nos paises
map <- joinCountryData2Map(sub_df, joinCode = "NAME",
nameJoinColumn = "COUNTRY",suggestForFailedCodes = TRUE)
colourPalette <- RColorBrewer::brewer.pal(5,'RdPu')
# felicidade
mapParams <- mapCountryData(map,
nameColumnToPlot="HDI_2015",
catMethod="fixedWidth",
mapTitle = "Indice de desenvolvimento Humano",
colourPalette = colourPalette,
oceanCol='lightblue',
missingCountryCol = 'white',
borderCol = 'gray',
addLegend = FALSE)
suppressWarnings(do.call(addMapLegend, c(mapParams, legendLabels="all",legendWidth=0.5,legendIntervals="data")))
# map
sub_df <- df_original[,c("COUNTRY","HDI_2015")]
# dando match nos paises
map <- joinCountryData2Map(sub_df, joinCode = "NAME",
nameJoinColumn = "COUNTRY",suggestForFailedCodes = TRUE)
colourPalette <- RColorBrewer::brewer.pal(5,'RdPu')
# felicidade
mapParams <- mapCountryData(map,
nameColumnToPlot="HDI_2015",
catMethod="fixedWidth",
mapTitle = "Indice de desenvolvimento Humano",
colourPalette = colourPalette,
oceanCol='lightblue',
missingCountryCol = 'white',
borderCol = 'gray',
addLegend = FALSE)
suppressWarnings(do.call(addMapLegend, c(mapParams, legendLabels="all",legendWidth=0.5,legendIntervals="data")))
# map
sub_df <- df_original[,c("COUNTRY","HDI_2015")]
# dando match nos paises
map <- joinCountryData2Map(sub_df, joinCode = "NAME",
nameJoinColumn = "COUNTRY",suggestForFailedCodes = TRUE)
colourPalette <- RColorBrewer::brewer.pal(5,'RdPu')
# felicidade
mapParams <- mapCountryData(map,
nameColumnToPlot="HDI_2015",
catMethod="fixedWidth",
mapTitle = "Indice de desenvolvimento Humano",
colourPalette = colourPalette,
oceanCol='lightblue',
missingCountryCol = 'white',
borderCol = 'gray',
addLegend = FALSE)
suppressWarnings(do.call(addMapLegend, c(mapParams, legendLabels="all",legendWidth=0.5,legendIntervals="data")))
# map
sub_df <- df_original[,c("COUNTRY","HDI_2015")]
# dando match nos paises
map <- joinCountryData2Map(sub_df, joinCode = "NAME",
nameJoinColumn = "COUNTRY",suggestForFailedCodes = TRUE)
colourPalette <- RColorBrewer::brewer.pal(5,'RdPu')
# felicidade
mapParams <- mapCountryData(map,
nameColumnToPlot="HDI_2015",
catMethod="fixedWidth",
mapTitle = "Indice de desenvolvimento Humano",
colourPalette = colourPalette,
oceanCol='lightblue',
missingCountryCol = 'white',
borderCol = 'gray',
addLegend = FALSE)
suppressWarnings(do.call(addMapLegend, c(mapParams, legendLabels="all",legendWidth=0.5,legendIntervals="data")))
# map
sub_df <- df_original[,c("COUNTRY","HDI_2015")]
# dando match nos paises
map <- joinCountryData2Map(sub_df, joinCode = "NAME",
nameJoinColumn = "COUNTRY",suggestForFailedCodes = TRUE)
colourPalette <- RColorBrewer::brewer.pal(5,'RdPu')
# felicidade
mapParams <- mapCountryData(map,
nameColumnToPlot="HDI_2015",
catMethod="fixedWidth",
mapTitle = "Indice de desenvolvimento Humano",
colourPalette = colourPalette,
oceanCol='lightblue',
missingCountryCol = 'white',
borderCol = 'gray',
addLegend = FALSE)
suppressWarnings(do.call(addMapLegend, c(mapParams, legendLabels="all",legendWidth=2,legendIntervals="data")))
# map
sub_df <- df_original[,c("COUNTRY","TOTAL_FRESHWATER_WD_KM3_2010")]
# dando match nos paises
map <- joinCountryData2Map(sub_df, joinCode = "NAME",
nameJoinColumn = "COUNTRY",suggestForFailedCodes = TRUE)
colourPalette <- RColorBrewer::brewer.pal(5,'RdPu')
# felicidade
mapParams <- mapCountryData(map,
nameColumnToPlot="HDI_2015",
catMethod="fixedWidth",
mapTitle = "Total de retirada de agua doce km³/ano",
colourPalette = colourPalette,
oceanCol='lightblue',
missingCountryCol = 'white',
borderCol = 'gray',
addLegend = FALSE)
# map
sub_df <- df_original[,c("COUNTRY","TOTAL_FRESHWATER_WD_KM3_2010")]
# dando match nos paises
map <- joinCountryData2Map(sub_df, joinCode = "NAME",
nameJoinColumn = "COUNTRY",suggestForFailedCodes = TRUE)
colourPalette <- RColorBrewer::brewer.pal(5,'RdPu')
# felicidade
mapParams <- mapCountryData(map,
nameColumnToPlot="TOTAL_FRESHWATER_WD_KM3_2010",
catMethod="fixedWidth",
mapTitle = "Total de retirada de agua doce km³/ano",
colourPalette = colourPalette,
oceanCol='lightblue',
missingCountryCol = 'white',
borderCol = 'gray',
addLegend = FALSE)
suppressWarnings(do.call(addMapLegend, c(mapParams, legendLabels="all",legendWidth=0.5,legendIntervals="data")))
# map
sub_df <- df_original[,c("COUNTRY","TOTAL_FRESHWATER_WD_KM3_2010")]
# dando match nos paises
map <- joinCountryData2Map(sub_df, joinCode = "NAME",
nameJoinColumn = "COUNTRY",suggestForFailedCodes = TRUE)
colourPalette <- RColorBrewer::brewer.pal(5,'RdPu')
# felicidade
mapParams <- mapCountryData(map,
nameColumnToPlot="TOTAL_FRESHWATER_WD_KM3_2010",
catMethod="fixedWidth",
mapTitle = "Total de retirada de agua doce km³/ano",
colourPalette = "heat",
oceanCol='lightblue',
missingCountryCol = 'white',
borderCol = 'gray',
addLegend = FALSE)
suppressWarnings(do.call(addMapLegend, c(mapParams, legendLabels="all",legendWidth=0.5,legendIntervals="data")))
library(ggpubr)
library(ggplot2)
library(reshape2)
library(xtable)
library(maps)
library(ggmap)
library(mapdata)
library(rworldmap)
knitr::opts_chunk$set(echo = TRUE)
setwd('C:/Users/Administrador/Desktop/git/SMC/Water-Consumption-And-Inequality/datasets')
df = read.table("merged_data.csv", header=TRUE, sep=",")
df_original = df
df = df[,c(-1,-10)]
df = na.omit(df)
df_original = na.omit(df_original)
df_original <- df_original[order(df_original$HDI_2015),]
df_original$COUNTRY <- factor(df_original$COUNTRY, levels=df_original$COUNTRY[order(df_original$HDI_2015)])
ggplot(df_original, aes(x=COUNTRY,y=HDI_2015)) +
geom_bar(stat="identity", aes(fill=HDI_2015)) +
theme(axis.text.x = element_text(angle = 90, vjust = 1, size = 8, hjust = 1),
axis.text.y = element_text(angle = 0, vjust = 1, size = 8, hjust = 1)) +
xlab("") + ylab("IDH") +
scale_fill_continuous(name="IDH") +
ggtitle("Indice de desenvolvimento humano")
mat <- round(cor(df),2)
melted_cormat <- melt(mat)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) + geom_tile() +
theme(axis.text.x = element_text(angle = 50, vjust = 1, size = 8, hjust = 1),
axis.text.y = element_text(angle = 0, vjust = 1, size = 8, hjust = 1),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
coord_fixed() +
scale_fill_gradient2(low  = "black",
high = "darkturquoise",
mid  = "white",
midpoint = 0,
limit = c(-1,1),
name="Grau de correlacao") +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 3) +
ggtitle("Matriz de correlacao de Pearson")
df_original <- df_original[order(df_original$TOTAL_FRESHWATER_WD_KM3_2010),]
df_original$COUNTRY <- factor(df_original$COUNTRY, levels=df_original$COUNTRY[order(df_original$TOTAL_FRESHWATER_WD_KM3_2010)])
ggplot(df_original, aes(x=COUNTRY,y=TOTAL_FRESHWATER_WD_KM3_2010)) +
geom_bar(stat="identity", aes(fill=TOTAL_FRESHWATER_WD_KM3_2010)) +
theme(axis.text.x = element_text(angle = 90, vjust = 1, size = 8, hjust = 1),
axis.text.y = element_text(angle = 0, vjust = 1, size = 8, hjust = 1)) +
scale_fill_continuous(name="Retirada de água\npotável km³/ano") +
xlab("") + ylab("Total de água potável retirada (km³/ano)\n(Na forma de raiz quadrada)") + ggtitle("")
df_original <- df_original[order(df_original$POPULATION_MILLIONS_2010),]
df_original$COUNTRY <- factor(df_original$COUNTRY, levels=df_original$COUNTRY[order(df_original$POPULATION_MILLIONS_2010)])
ggplot(df_original, aes(x=COUNTRY,y=POPULATION_MILLIONS_2010)) +
geom_bar(stat="identity", aes(fill=POPULATION_MILLIONS_2010)) +
theme(axis.text.x = element_text(angle = 90, vjust = 1, size = 8, hjust = 1),
axis.text.y = element_text(angle = 0, vjust = 1, size = 8, hjust = 1)) +   scale_fill_continuous(name="Populacao\n(milhões)") +
xlab("") + ylab("Populacao em milhoes")
```
sub_df <- df_original[,c("COUNTRY","ANNUAL_RENEWABLE_WATER_2010")]
map <- joinCountryData2Map(sub_df, joinCode = "NAME",
nameJoinColumn = "COUNTRY",suggestForFailedCodes = TRUE)
colourPalette <- RColorBrewer::brewer.pal(5,'RdPu')
mapParams <- mapCountryData(map,
nameColumnToPlot="ANNUAL_RENEWABLE_WATER_2010",
catMethod="fixedWidth",
mapTitle = "Agua renovavel anual km³/ano",
colourPalette = "heat",
oceanCol='lightblue',
missingCountryCol = 'white',
borderCol = 'gray',
addLegend = FALSE)
suppressWarnings(do.call(addMapLegend, c(mapParams, legendLabels="all",legendWidth=0.5,legendIntervals="data")))
---
output: github_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## Consumo de Agua e Desigualdade
A breve e presente analise tem por objetivo uma avaliacao do consumo de Agua em paises estadunidenses em comparativo com paises da Africa-subsaariana como fator de influencia em desigualdade.
## Correlacao entre as variaveis
```{r include=FALSE}
setwd('C:/Users/Administrador/Desktop/git/SMC/Water-Consumption-And-Inequality/datasets')
df = read.table("merged_data.csv", header=TRUE, sep=",")
df_original = df
df = df[,c(-1,-10)]
df = na.omit(df)
df_original = na.omit(df_original)
df_original <- df_original[order(df_original$HDI_2015),]
df_original$COUNTRY <- factor(df_original$COUNTRY, levels=df_original$COUNTRY[order(df_original$HDI_2015)])
ggplot(df_original, aes(x=COUNTRY,y=HDI_2015)) +
geom_bar(stat="identity", aes(fill=HDI_2015)) +
theme(axis.text.x = element_text(angle = 90, vjust = 1, size = 8, hjust = 1),
axis.text.y = element_text(angle = 0, vjust = 1, size = 8, hjust = 1)) +
xlab("") + ylab("IDH") +
scale_fill_continuous(name="IDH") +
ggtitle("Indice de desenvolvimento humano")
```
```{r, echo=FALSE}
mat <- round(cor(df),2)
melted_cormat <- melt(mat)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) + geom_tile() +
theme(axis.text.x = element_text(angle = 50, vjust = 1, size = 8, hjust = 1),
axis.text.y = element_text(angle = 0, vjust = 1, size = 8, hjust = 1),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
coord_fixed() +
scale_fill_gradient2(low  = "black",
high = "darkturquoise",
mid  = "white",
midpoint = 0,
limit = c(-1,1),
name="Grau de correlacao") +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 3) +
ggtitle("Matriz de correlacao de Pearson")
```
**TOTAL_FRESHWATER_WD_KM3_2010**
```{r}
df_original <- df_original[order(df_original$TOTAL_FRESHWATER_WD_KM3_2010),]
df_original$COUNTRY <- factor(df_original$COUNTRY, levels=df_original$COUNTRY[order(df_original$TOTAL_FRESHWATER_WD_KM3_2010)])
ggplot(df_original, aes(x=COUNTRY,y=TOTAL_FRESHWATER_WD_KM3_2010)) +
geom_bar(stat="identity", aes(fill=TOTAL_FRESHWATER_WD_KM3_2010)) +
theme(axis.text.x = element_text(angle = 90, vjust = 1, size = 8, hjust = 1),
axis.text.y = element_text(angle = 0, vjust = 1, size = 8, hjust = 1)) +
scale_fill_continuous(name="Retirada de água\npotável km³/ano") +
xlab("") + ylab("Total de água potável retirada (km³/ano)\n(Na forma de raiz quadrada)") + ggtitle("")
```
**POPULATION_MILLIONS_2010**
```{r}
df_original <- df_original[order(df_original$POPULATION_MILLIONS_2010),]
df_original$COUNTRY <- factor(df_original$COUNTRY, levels=df_original$COUNTRY[order(df_original$POPULATION_MILLIONS_2010)])
ggplot(df_original, aes(x=COUNTRY,y=POPULATION_MILLIONS_2010)) +
geom_bar(stat="identity", aes(fill=POPULATION_MILLIONS_2010)) +
theme(axis.text.x = element_text(angle = 90, vjust = 1, size = 8, hjust = 1),
axis.text.y = element_text(angle = 0, vjust = 1, size = 8, hjust = 1)) +   scale_fill_continuous(name="Populacao\n(milhões)") +
xlab("") + ylab("Populacao em milhoes")
```
**ANNUAL_RENEWABLE_WATER_2010**
```{r}
df_original <- df_original[order(df_original$ANNUAL_RENEWABLE_WATER_2010),]
df_original$COUNTRY <- factor(df_original$COUNTRY, levels=df_original$COUNTRY[order(df_original$ANNUAL_RENEWABLE_WATER_2010)])
ggplot(df_original, aes(x=COUNTRY,y=sqrt(ANNUAL_RENEWABLE_WATER_2010))) +
geom_bar(stat="identity", aes(fill=ANNUAL_RENEWABLE_WATER_2010)) +
theme(axis.text.x = element_text(angle = 90, vjust = 1, size = 8, hjust = 1),
axis.text.y = element_text(angle = 0, vjust = 1, size = 8, hjust = 1)) +
xlab("") + ylab("Agua renovavel") +
scale_fill_continuous(name="Agua renovavel km³")
```
## Mapas
### IDH
```{r, echo=FALSE, fig.height=7, fig.width=14}
sub_df <- df_original[,c("COUNTRY","HDI_2015")]
map <- joinCountryData2Map(sub_df, joinCode = "NAME",
nameJoinColumn = "COUNTRY",suggestForFailedCodes = TRUE)
colourPalette <- RColorBrewer::brewer.pal(5,'RdPu')
mapParams <- mapCountryData(map,
nameColumnToPlot="HDI_2015",
catMethod="fixedWidth",
mapTitle = "Indice de desenvolvimento Humano",
colourPalette = colourPalette,
oceanCol='lightblue',
missingCountryCol = 'white',
borderCol = 'gray',
addLegend = FALSE)
suppressWarnings(do.call(addMapLegend, c(mapParams, legendLabels="all",legendWidth=0.5,legendIntervals="data")))
```
### Total de retirada de agua doce km³/ano
```{r, echo=FALSE, fig.height=7, fig.width=14}
sub_df <- df_original[,c("COUNTRY","TOTAL_FRESHWATER_WD_KM3_2010")]
map <- joinCountryData2Map(sub_df, joinCode = "NAME",
nameJoinColumn = "COUNTRY",suggestForFailedCodes = TRUE)
colourPalette <- RColorBrewer::brewer.pal(5,'RdPu')
mapParams <- mapCountryData(map,
nameColumnToPlot="TOTAL_FRESHWATER_WD_KM3_2010",
catMethod="fixedWidth",
mapTitle = "Total de retirada de agua doce km³/ano",
colourPalette = "heat",
oceanCol='lightblue',
missingCountryCol = 'white',
borderCol = 'gray',
addLegend = FALSE)
suppressWarnings(do.call(addMapLegend, c(mapParams, legendLabels="all",legendWidth=0.5,legendIntervals="data")))
```
### Agua renovavel anual
```{r, echo=FALSE, fig.height=7, fig.width=14}
sub_df <- df_original[,c("COUNTRY","ANNUAL_RENEWABLE_WATER_2010")]
map <- joinCountryData2Map(sub_df, joinCode = "NAME",
nameJoinColumn = "COUNTRY",suggestForFailedCodes = TRUE)
colourPalette <- RColorBrewer::brewer.pal(5,'RdPu')
mapParams <- mapCountryData(map,
nameColumnToPlot="ANNUAL_RENEWABLE_WATER_2010",
catMethod="fixedWidth",
mapTitle = "Agua renovavel anual km³/ano",
colourPalette = "heat",
oceanCol='lightblue',
missingCountryCol = 'white',
borderCol = 'gray',
addLegend = FALSE)
suppressWarnings(do.call(addMapLegend, c(mapParams, legendLabels="all",legendWidth=0.5,legendIntervals="data")))
```
